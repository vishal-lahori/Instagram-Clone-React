{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","openSignIn","setOpenSignIn","posts","setposts","open","setOpen","setUsername","password","setPassword","email","setEmail","setUser","onAuthStateChanged","authUser","updateProfile","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33f3e4c2.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCrT2mQVL1gwOTlFZLKZUQ4P4P6Hh-ChiQ\",\r\n  authDomain: \"instagram-clone-ce809.firebaseapp.com\",\r\n  databaseURL: \"https://instagram-clone-ce809.firebaseio.com\",\r\n  projectId: \"instagram-clone-ce809\",\r\n  storageBucket: \"instagram-clone-ce809.appspot.com\",\r\n  messagingSenderId: \"856727888888\",\r\n  appId: \"1:856727888888:web:cbd423497f443352afec0d\",\r\n  measurementId: \"G-8KZMZDGWJD\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Post.css\";\r\nimport { db } from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nfunction Post({ postId, user, username, caption, imageUrl }) {\r\n  const [comments, setComments] = useState([]);\r\n  const [comment, setComment] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    if (postId) {\r\n      unsubscribe = db\r\n        .collection(\"posts\")\r\n        .doc(postId)\r\n        .collection(\"comments\")\r\n        .orderBy(\"timestamp\")\r\n        .onSnapshot((snapshot) => {\r\n          setComments(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n    }\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [postId]);\r\n\r\n  const postComment = (event) => {\r\n    event.preventDefault();\r\n\r\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n      text: comment,\r\n      username: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setComment(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post_header\">\r\n        <Avatar\r\n          className=\"post_avatar\"\r\n          alt=\"vishal_lahori\"\r\n          src=\"https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png\"\r\n        />\r\n        <h4>{username}</h4>\r\n      </div>\r\n\r\n      <img className=\"post_image\" src={imageUrl} />\r\n\r\n      <h4 className=\"post_text\">\r\n        <strong>{username}</strong> {caption}\r\n      </h4>\r\n\r\n      <div className=\"post_comments\">\r\n        {comments.map((comment) => (\r\n          <p>\r\n            <strong>{comment.username}</strong>\r\n            {comment.text}\r\n          </p>\r\n        ))}\r\n      </div>\r\n\r\n      {user && (\r\n        <form className=\"post_commentBox\">\r\n          <input\r\n            className=\"post_input\"\r\n            type=\"text\"\r\n            placeholder=\"Add a Comment..\"\r\n            value={comment}\r\n            onChange={(e) => setComment(e.target.value)}\r\n          />\r\n\r\n          <button\r\n            disabled={!comment}\r\n            className=\"post_button\"\r\n            type=\"submit\"\r\n            onClick={postComment}\r\n          >\r\n            Post\r\n          </button>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { storage, db } from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport \"./ImageUpload.css\";\r\n\r\nfunction ImageUpload({ username }) {\r\n  const [image, setImage] = useState(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        //progress function..\r\n        const progress = Math.round(\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n        );\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        //Error Function..\r\n        console.log(error);\r\n        alert(error.message);\r\n      },\r\n      () => {\r\n        //Complete Function..\r\n        storage\r\n          .ref(\"images\")\r\n          .child(image.name)\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            //post image inside db..\r\n            db.collection(\"posts\").add({\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n              caption: caption,\r\n              imageUrl: url,\r\n              username: username,\r\n            });\r\n\r\n            setProgress(0);\r\n            setCaption(\"\");\r\n            setImage(null);\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"imageupload\">\r\n      <progress className=\"imageupload_progress\" value={progress} max=\"100\" />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter a Caption..\"\r\n        onChange={(event) => setCaption(event.target.value)}\r\n        value={caption}\r\n      />\r\n      <input type=\"file\" onChange={handleChange} />\r\n      <Button onClick={handleUpload}>Upload</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport { db, auth } from \"./firebase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Button, Input, Container } from \"@material-ui/core\";\nimport ImageUpload from \"./ImageUpload\";\nimport InstagramEmbed from \"react-instagram-embed\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [posts, setposts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        //user has logged in..\n        console.log(authUser);\n        setUser(authUser);\n\n        if (authUser.displayName) {\n          //don't update username..\n        } else {\n          //if we just created someone..\n          return authUser.updateProfile({\n            displayName: username,\n          });\n        }\n      } else {\n        //user has logged out..\n        setUser(null);\n      }\n    });\n\n    return () => {\n      //perform some actions\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setposts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            post: doc.data(),\n          }))\n        );\n      });\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  };\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpenSignIn(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app_signup\">\n            <center>\n              <img className=\"app_headerImage\" src=\"\" />\n            </center>\n\n            <Input\n              placeholder=\"username\"\n              text=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              text=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              text=\"text\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signUp}>\n              Sign Up\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app_signup\">\n            <center>\n              <img className=\"app_headerImage\" src=\"\" />\n            </center>\n\n            <Input\n              placeholder=\"email\"\n              text=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              text=\"text\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signIn}>\n              Sign In\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app_header\">\n        <div className=\"app_headerMenu\">\n          <img\n            className=\"app_headerImage\"\n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"\n          ></img>\n        </div>\n\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n        ) : (\n          <div className=\"app_loginContainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n            <Button onClick={() => setOpen(true)}>Sign Up</Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"app_posts_all\">\n        <div className=\"app_posts\">\n          <div className=\"app_postsLeft\">\n            {posts.map(({ id, post }) => (\n              <Post\n                key={id}\n                postId={id}\n                user={user}\n                username={post.username}\n                caption={post.caption}\n                imageUrl={post.imageUrl}\n              />\n            ))}\n          </div>\n\n          <div className=\"app_postsRight\">\n            <InstagramEmbed\n              url=\"https://www.instagram.com/p/B49pYduBw_q/?utm_source=ig_web_copy_link\"\n              maxWidth={320}\n              hideCaption={false}\n              containerTagName=\"div\"\n              protocol=\"\"\n              injectScript\n              onLoading={() => {}}\n              onSuccess={() => {}}\n              onAfterRender={() => {}}\n              onFailure={() => {}}\n            />\n\n            {user?.displayName ? (\n              <ImageUpload username={user.displayName} />\n            ) : (\n              <h3>Sorry You need to login to upload</h3>\n            )}\n          </div>\n\n          <div className=\"app_upload\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}